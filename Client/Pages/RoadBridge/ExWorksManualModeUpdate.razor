@using static FinancialExtensions;
@using System.Text.Json
@inject IQuoteManager _quoteManager;

<MudGrid>
    <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
        <MudGrid>
            <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
                <MudText Color="Color.Primary" Typo="Typo.h4">Quote - @(ExWorksQuoteResult.ReferenceNumber)</MudText>
            </MudItem>
        </MudGrid>
    </MudItem>
    <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
        <MudPaper Class="pa-4">
            <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
                <MudGrid Class="justify-start">
                    <MudItem xs="12" sm="12" md="4" lg="4" xl="4">
                        <MudText Color="Color.Dark">Weight</MudText>
                        <MudText Style="font-weight: bold;">@ExWorksInputData.Weight @ExWorksInputData.WeightType</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="4" lg="4" xl="4">
                        <MudText Color="Color.Dark">CBM</MudText>
                        <MudText Style="font-weight: bold;">@ExWorksInputData.Cbm</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="4" lg="4" xl="4">
                        <MudText Color="Color.Dark">Pincode, Location, State</MudText>
                        <MudText Style="font-weight: bold;">
                            @ExWorksQuoteResult.Pincode
                            @QuoteExworksData.Locations.FirstOrDefault()
                        </MudText>
                    </MudItem>
                </MudGrid>
            </MudItem>
            @foreach (var via in QuoteExworksData.SplittedDataDetails.Vias)
            {
                <MudItem Class="pa-2 mt-4" style="border: 1px solid gray; border-radius: var(--mud-default-borderradius);"
                         xs="12" sm="12" md="12" lg="12" xl="12">
                    <MudExpansionPanels Dense="true">
                        <MudExpansionPanel @bind-IsExpanded="@_isPanelOpen" HideIcon="true"
                                           style="background-color: var(--mud-palette-table-hover);">
                            <TitleContent>
                                <MudContainer Class="d-flex justify-start flex-grow-1 gap-4">
                                    <MudIcon Icon="@(_isPanelOpen ? Icons.Material.Filled.HorizontalRule : Icons.Material.Filled.Add)">
                                    </MudIcon>
                                    <MudText Typo="Typo.subtitle1">Via : @via.Name</MudText>
                                </MudContainer>
                            </TitleContent>
                            <ChildContent>
                                <MudItem Class="mb-1" style="background-color: var(--mud-palette-surface);" xs="12" sm="12"
                                         md="12" lg="12" xl="12">
                                    <table style="border: 1px solid lightgrey; border-collapse: collapse; width: 100%;">
                                        <tr>
                                            <th class="invoice-table" style="text-align: start">Particulars</th>
                                            <th class="invoice-table" style="text-align: start">
                                                <b>&dollar; USD</b>
                                            </th>
                                        </tr>
                                        <tr>
                                            <td class="invoice-table">Customs Clearance per Invoice</td>
                                            <td class="invoice-table">
                                                <MudInput FullWidth DisableUnderLine InputType="InputType.Number"
                                                          T="string" Value="@FormatNumber(via.Charges.CustomClearance.Dollar)"
                                                          ValueChanged="x => via.Charges.CustomClearance.Dollar = FormatNumber(x)"/>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td class="invoice-table">ACD/ACI/ENS Per HBL</td>
                                            <td class="invoice-table">
                                                <MudInput FullWidth DisableUnderLine InputType="InputType.Number"
                                                          T="string" Value="@FormatNumber(via.Charges.FobPerBl.Dollar)"
                                                          ValueChanged="x => via.Charges.FobPerBl.Dollar = FormatNumber(x)"/>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td class="invoice-table">IHC/THC</td>
                                            <td class="invoice-table">
                                                <MudInput FullWidth DisableUnderLine InputType="InputType.Number"
                                                          T="string" Value="@FormatNumber(via.Charges.FobPerWm.Dollar)"
                                                          ValueChanged="x => via.Charges.FobPerWm.Dollar = FormatNumber(x)"/>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td class="invoice-table">Documentation Per HBL</td>
                                            <td class="invoice-table">
                                                <MudInput FullWidth DisableUnderLine InputType="InputType.Number"
                                                          T="string" Value="@FormatNumber(via.Charges.DocumentationPerBl.Dollar)"
                                                          ValueChanged="x => via.Charges.DocumentationPerBl.Dollar = FormatNumber(x)"/>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td class="invoice-table">Pick-up charges</td>
                                            <td class="invoice-table">
                                                <MudInput FullWidth DisableUnderLine InputType="InputType.Number"
                                                          T="string" Value="@FormatNumber(via.Charges.TransportationCost.Dollar)"
                                                          ValueChanged="x => via.Charges.TransportationCost.Dollar = FormatNumber(x)"/>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td class="invoice-table">Solas Admin Fee per shpt</td>
                                            <td class="invoice-table">
                                                <MudInput FullWidth DisableUnderLine InputType="InputType.Number"
                                                          T="string" Value="@FormatNumber(via.Charges.SolasAdmin.Dollar)"
                                                          ValueChanged="x => via.Charges.SolasAdmin.Dollar = FormatNumber(x)"/>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td class="invoice-table">Solas Weighing Fee w/m</td>
                                            <td class="invoice-table">
                                                <MudInput FullWidth DisableUnderLine InputType="InputType.Number"
                                                          T="string" Value="@FormatNumber(via.Charges.SolasWm.Dollar)"
                                                          ValueChanged="x => via.Charges.SolasWm.Dollar = FormatNumber(x)"/>
                                            </td>
                                        </tr>
                                    </table>
                                </MudItem>
                            </ChildContent>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                </MudItem>
            }
            <MudItem xs="12" sm="12" md="12" lg="12" xl="12" Class="mt-6">
                <MudGrid Class="justify-start">
                    <MudItem xs="12" sm="12" md="6" lg="6" xl="6">
                        <div class="d-flex flex-row-reverse flex-grow-1">
                            <MudButton Variant="Variant.Filled" Disabled="false" Color="Color.Primary" OnClick="@ShowFinalResult"
                                       Size="Size.Small">
                                Next
                            </MudButton>
                        </div>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudPaper>
    </MudItem>
    <MudItem Style="align-items: center">
        <div style="text-align: center;">
            <MudButton Variant="Variant.Filled" Disabled="false" Color="Color.Primary" OnClick="@OnNewRequest"
                       Size="Size.Small">
                New Request
            </MudButton>
        </div>
    </MudItem>
</MudGrid>

@code
{
    [Parameter]
    public QuoteResponse ExWorksQuoteResult { get; set; } = null!;

    [Parameter]
    public QuoteRequest ExWorksInputData { get; set; } = null!;

    [Parameter]
    public QuoteData QuoteExworksData { get; set; } = null!;

    [Parameter]
    public EventCallback<MouseEventArgs> OnNewRequest { get; set; }

    [Parameter]
    public EventCallback<bool> OnUpdate { get; set; }

    bool _isPanelOpen = true;

    private async Task ShowFinalResult()
    {
        foreach (var via in QuoteExworksData.SplittedDataDetails.Vias)
        {
            via.Charges.Total.Dollar = GetTotal(0,
                via.Charges.CustomClearance.Dollar,
                via.Charges.FobPerBl.Dollar,
                via.Charges.FobPerWm.Dollar,
                via.Charges.DocumentationPerBl.Dollar,
                via.Charges.TransportationCost.Dollar,
                via.Charges.SolasAdmin.Dollar,
                via.Charges.SolasWm.Dollar);

            via.Charges.CustomClearance.Rupee = UpdateRupee(via.Charges.CustomClearance.Dollar, QuoteExworksData.ConversionRateInr);
            via.Charges.FobPerBl.Rupee = UpdateRupee(via.Charges.FobPerBl.Dollar, QuoteExworksData.ConversionRateInr);
            via.Charges.FobPerWm.Rupee = UpdateRupee(via.Charges.FobPerWm.Dollar, QuoteExworksData.ConversionRateInr);
            via.Charges.DocumentationPerBl.Rupee = UpdateRupee(via.Charges.DocumentationPerBl.Dollar, QuoteExworksData.ConversionRateInr);
            via.Charges.TransportationCost.Rupee = UpdateRupee(via.Charges.TransportationCost.Dollar, QuoteExworksData.ConversionRateInr);
            via.Charges.SolasAdmin.Rupee = UpdateRupee(via.Charges.SolasAdmin.Dollar, QuoteExworksData.ConversionRateInr);
            via.Charges.SolasWm.Rupee = UpdateRupee(via.Charges.SolasWm.Dollar, QuoteExworksData.ConversionRateInr);

            via.Charges.Total.Rupee = FormatAmount(GetTotal(QuoteExworksData.ConversionRateInr,
                via.Charges.Total.Dollar));

            decimal.TryParse(via.Charges.Total.Rupee, out var totalRupees);
            decimal.TryParse(via.Charges.Gst.ToString(), out var gstRate);
            var result = Math.Round(totalRupees + totalRupees * gstRate / 100, MidpointRounding.AwayFromZero);
            via.Charges.GstData.Rupee = FormatAmount(result.ToString());
        }

        var charges = QuoteExworksData.SplittedDataDetails.Vias.Select(a => a.Charges).ToArray();
        var json = JsonSerializer.Serialize(charges);
        await _quoteManager.UpdateExWorkChargesByQuoteID(json, ExWorksQuoteResult.Id).ConfigureAwait(false);
        await OnUpdate.InvokeAsync(true).ConfigureAwait(false);
    }
}
